#https://overcome-the-limits.tistory.com/101
openapi: '3.0.0'
info:
  title: Board API
  version: '1.0'
  description: "Board api using express.js"
  contact:
    name: "J-hoplin1"
    email: "jhoplin7259@gmail.com"
    url: "https://github.com/J-hoplin1/Board-API"
servers:
  - url: http://127.0.0.1:4000
    description: Dev Container localhost
components:
  # Security Configuration.
  # Bearerformat : Bearer (token)
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    "200":
      type: object
      properties:
        msg:
          type: string
          example: OK

    "200-with-token":
      type: object
      properties:
        msg:
          type: string
          example: OK
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImMwNzVhYzE4LWI1ODMtNDUzNS1iM2U0LWNmMTM3MGQxMTQzYSIsImlhdCI6MTY3MzQ5MDI1MCwiZXhwIjoxNjczNDkwNTUwLCJpc3MiOiJIb3BsaW4ifQ.cm4I0JHQe_NIhlJ-9fAEy9sJVwtGuhIOqMIDUn74zOI"
      
    "200-true":
      type: object
      properties:
        msg:
          type: boolean
          example: true
    
    "200-false":
      type: object
      properties:
        msg:
          type: boolean
          example: false
    
    "400-user-level-range-unavailable":
      type: object
      properties:
        msg:
          type: string
          example: "User level range unavailable"
    "400-user-password-unmatched":
      type: object
      properties:
        msg:
          type: string
          example: "Password not matched"
    
    "400-user-already-exist":
      type: object
      properties:
        msg:
          type: string
          example: "User email or nickname already exist"

    "400-user-not-exist":
      type: object
      properties:
        msg:
          type: string
          example: "User not exist"
    
    "400-post-not-exist":
      type: object
      properties:
        msg:
          type: string
          example: "Post not exist"

    "400-post-id-not-given":
      type: object
      properties:
        msg:
          type: string
          example: "Post ID not given"
    
    "400-comment-not-found":
      type: object
      properties:
        msg:
          type: string
          example: "Comment not found"

    "401":
      type: object
      properties:
        msg:
          type: string
          example: "Unauthorized user or request"

    "403":
      type: object
      properties:
        msg:
          type: string
          example: "Forbidden API"
    
    "403-blocked":
      type: object
      properties:
        msg:
          type: string
          example: "This API has been blocked"

    "403-token-invalid":
      type: object
      properties:
        msg:
          type: string
          example: "Invalid token"
      
    "410":
      type: object
      properties:
        msg:
          type: string
          example: "This API has been deprecated"
    
    "419":
      type: object
      properties:
        msg:
          type: string
          example: "Token expired"

    "500":
      type: object
      properties:
        msg:
          type: string
          example: "API logic error"

security: # Set auth globally
  - bearerAuth: []

tags:
  - name: /
    description: Basic API
  - name: /api/v1/auth
    description: Authentification API
  - name: /api/v1/post
    description: Post Management API
  - name: /api/v1/user
    description: User API
  - name: /api/v1/post/comment
    description: Comment Management API
  - name: Admin Only
    description: APIs that user with role 'admin' can only use
paths:
  /ping:
    get:
      tags:
        - /
      summary: Check service ping
      responses:
        "200":
          description: "Success to login"
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: pong

  /api/v1/auth/join:
    post:
      tags:
        - /api/v1/auth
      summary: Join service.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  example: password
                email:
                  type: string
                  example: exampl@gmail.com
                nickname:
                  type: string
                  example: Hoplin
                gender:
                  type: string
                  enum:
                    - male
                    - female
                role:
                  type: string
                  enum:
                    - user
                    - admin
                birth:
                  type: string
                  example: 2023-01-12
              required:
                - password
                - email
                - nickname
                - gender
                - birth
      responses:
        "200":
          description: "Success to join"
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: OK
                  data:
                    type: object
                    properties:
                      id:
                        type: object
                        example: "c075ac18-b583-4535-b3e4-cf1370d1143a"
        "400":
          description: "User already exist"
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: "User already exist"
        
        "401":
          description: "Unauthorized user or request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/401"

        "403":
          description: "API Blocked"
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/403"
                  - $ref: "#/components/schemas/403-blocked"
                  - $ref: "#/components/schemas/403-token-invalid"
        
        "410":
          description: "API deprecated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/410"

        "500":
          description: "Server Error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'

  /api/v1/auth/login:
    post:
      tags:
        - /api/v1/auth
      summary: Login Service
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: exampl@gmail.com
                password:
                  type: string
                  example: password
      responses:
        "200":
          description: "Success to login"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/200-with-token'
        "400":
          description: "User not exist"
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: "User not exist"
        
        "401":
          description: "Unauthorized user or request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/401"

        "403":
          description: "API Blocked"
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/403"
                  - $ref: "#/components/schemas/403-blocked"
                  - $ref: "#/components/schemas/403-token-invalid"
        
        "410":
          description: "API deprecated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/410"

        "500":
          description: "Server Error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'

  /api/v1/auth/dedicate-email:
    post:
      tags:
        - /api/v1/auth
      summary: Check E-mail already in used
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: example@gmail.com
              required:
                - email
      responses:
        "200":
          description: "Success to login"
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/200-true"
                  - $ref: "#/components/schemas/200-false"
        "403":
          description: "API Blocked"
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/403"
                  - $ref: "#/components/schemas/403-blocked"
                  - $ref: "#/components/schemas/403-token-invalid"
        
        "410":
          description: "API deprecated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/410"

        "500":
          description: "Server Error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
  
  /api/v1/auth/dedicate-nickname:
    post:
      tags:
        - /api/v1/auth
      summary: Check nickname already in used
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nickname:
                  type: string
                  example: nickname
              required:
                - nickname
      responses:
        "200":
          description: "Success to login"
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/200-true"
                  - $ref: "#/components/schemas/200-false"
        "403":
          description: "API Blocked"
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/403"
                  - $ref: "#/components/schemas/403-blocked"
                  - $ref: "#/components/schemas/403-token-invalid"
        
        "410":
          description: "API deprecated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/410"

        "500":
          description: "Server Error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
  
  /api/v1/auth/withdraw:
    post:
      tags:
        - /api/v1/auth
      summary: User withdraw service
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  example: password
              required:
                - password
      responses:
        "200":
          description: "Success to login"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/200'
        
        "403":
          description: "API Blocked"
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/403"
                  - $ref: "#/components/schemas/403-blocked"
                  - $ref: "#/components/schemas/403-token-invalid"
        
        "410":
          description: "API deprecated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/410"
        
        "419":
          description: "Token expired"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/419"
        
        "500":
          description: "Server Error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'

  
  /api/v1/auth/token:
    post:
      tags:
        - /api/v1/auth
      summary: Get user's token. Refresh token will be save in redis
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  example: "d11d7d6a-9506-4df3-875f-a514d093dccb"
                  description: User id
                password:
                  type: string
                  example: "password"
                  description: User password
      responses:
        "200":
          description: "Success to login"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/200-with-token'
        "400":
          description: "User not exist"
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/400-user-not-exist"
                  - $ref: "#/components/schemas/400-user-password-unmatched"
        
        "401":
          description: "Unauthorized user or request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/401"

        "403":
          description: "API Blocked"
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/403"
                  - $ref: "#/components/schemas/403-blocked"
                  - $ref: "#/components/schemas/403-token-invalid"
        
        "410":
          description: "API deprecated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/410"

        "500":
          description: "Server Error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'

  /api/v1/auth/refresh:
    post:
      tags:
        - /api/v1/auth
      summary: Get new token if refresh token is valid
      responses:
        "200":
          description: "Success to login"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/200-with-token'
        "400":
          description: "User not exist"
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: "User not exist"
        
        "401":
          description: "Unauthorized user or request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/401"

        "403":
          description: "API Blocked"
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/403"
                  - $ref: "#/components/schemas/403-blocked"
                  - $ref: "#/components/schemas/403-token-invalid"
        
        "410":
          description: "API deprecated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/410"

        "500":
          description: "Server Error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
  

  # User API

  /api/v1/user/get:
    get:
      tags:
        - /api/v1/user
      summary: Get user's ID with nickname
      parameters:
        - in: query
          name: nickname
          required: true
          schema:
            type: string
            example: nickname
          description: User Nickname
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: "OK"
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        example: c075ac18-b583-4535-b3e4-cf1370d1143a
        "400":
          description: "User not exist"
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: "User not exist"
        "401":
          description: "Unauthorized user or request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/401"

        "403":
          description: "API Blocked"
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/403"
                  - $ref: "#/components/schemas/403-blocked"
                  - $ref: "#/components/schemas/403-token-invalid"
        
        "410":
          description: "API deprecated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/410"
        
        "419":
          description: "Token expired"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/419"

        "500":
          description: "Server Error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
  /api/v1/user/info:
    get:
      tags:
        - /api/v1/user
      summary: Get user information by ID
      parameters:
        - in: query
          name: id
          required: true
          schema:
            type: string
            example: c075ac18-b583-4535-b3e4-cf1370d1143a
          description: User ID to search
      responses:
        "200":
            description: "OK"
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    msg:
                      type: string
                      example: "OK"
                    data:
                      type: object
                      properties:
                        id:
                          type: string
                          example: c075ac18-b583-4535-b3e4-cf1370d1143a
                        email:
                          type: string
                          example: example@gmail.com
                        nickname:
                          type: string
                          example: nickname
                        role:
                          type: string
                          enum:
                            - user
                            - admin
                        level:
                          type: integer
                          enum:
                            - 1
                            - 2
                            - 3
                            - 4
                            - 5
                        gender:
                          type: string
                          enum:
                            - male
                            - female
                        birth:
                          type: string
                          example: 2023-01-12
        "400":
          description: "User not exist"
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: "User not exist"
        "401":
          description: "Unauthorized user or request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/401"

        "403":
          description: "API Blocked"
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/403"
                  - $ref: "#/components/schemas/403-blocked"
                  - $ref: "#/components/schemas/403-token-invalid"
        
        "410":
          description: "API deprecated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/410"
        
        "419":
          description: "Token expired"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/419"

        "500":
          description: "Server Error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
  
  /api/v1/user/list:
    get:
      tags:
        - /api/v1/user
      summary: Get user list.
      parameters:
        - in: query
          name: offset
          schema:
            type: integer
            default: 0
          description: Number of item to skip before collecting result
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of items to return
      responses:
        "200":
            description: "OK"
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    msg:
                      type: string
                      example: "OK"
                    data:
                      type: array
                      items:
                        type: object
                        properties:
                          id:
                            type: string
                            example: c075ac18-b583-4535-b3e4-cf1370d1143a
                          email:
                            type: string
                            example: example@gmail.com
                          nickname:
                            type: string
                            example: nickname
                          role:
                            type: string
                            enum:
                              - user
                              - admin
                          level:
                            type: integer
                            enum:
                              - 1
                              - 2
                              - 3
                              - 4
                              - 5
                          gender:
                            type: string
                            enum:
                              - male
                              - female
                          birth:
                            type: string
                            example: 2023-01-12
        "400":
          description: "User not exist"
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: "User not exist"
        "401":
          description: "Unauthorized user or request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/401"

        "403":
          description: "API Blocked"
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/403"
                  - $ref: "#/components/schemas/403-blocked"
                  - $ref: "#/components/schemas/403-token-invalid"
        
        "410":
          description: "API deprecated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/410"
        
        "419":
          description: "Token expired"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/419"

        "500":
          description: "Server Error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'

  /api/v1/user/levelup:
    patch:
      tags:
        - /api/v1/user
        - Admin Only
      summary: Level up user's level. Admin only
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  example: "c075ac18-b583-4535-b3e4-cf1370d1143a"
      responses:
        "200":
          description: "Success to levelup"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/200'

        "400":
          description: "Invalid Range"
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/400-user-level-range-unavailable"
        
        "403":
          description: "API Blocked"
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/403"
                  - $ref: "#/components/schemas/403-blocked"
                  - $ref: "#/components/schemas/403-token-invalid"
        
        "410":
          description: "API deprecated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/410"
        
        "419":
          description: "Token expired"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/419"

        "500":
          description: "Server Error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
        
  /api/v1/user/leveldown:
    patch:
      tags:
        - /api/v1/user
        - Admin Only
      summary: Level down user's level. Admin only
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  example: "c075ac18-b583-4535-b3e4-cf1370d1143a"
      responses:
        "200":
          description: "Success to level down"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/200'

        "400":
          description: "Invalid Range"
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/400-user-level-range-unavailable"
        
        "403":
          description: "API Blocked"
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/403"
                  - $ref: "#/components/schemas/403-blocked"
                  - $ref: "#/components/schemas/403-token-invalid"
        
        "410":
          description: "API deprecated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/410"
        
        "419":
          description: "Token expired"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/419"

        "500":
          description: "Server Error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'

  /api/v1/user/edit:
    put:
      tags:
        - /api/v1/user
      summary: Edit user information. Need to check /api/v1/auth/dedicate-email, /api/v1/auth/dedicate-nickname before this API
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  example: password
                password:
                  type: string
                  example: password
                nickname:
                  type: string
                  example: nickname
                changedPassword:
                  type: string
                  example: changed password
                birth:
                  type: string
                  example: 2023-01-12
      responses:
        "200":
          description: "Success to level down"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/200'

        "400":
          description: "Invalid fields"
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/400-user-already-exist"
                  - $ref: "#/components/schemas/400-user-password-unmatched"
                  - $ref: "#/components/schemas/400-user-not-exist"
        
        "403":
          description: "API Blocked"
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/403"
                  - $ref: "#/components/schemas/403-blocked"
                  - $ref: "#/components/schemas/403-token-invalid"
        
        "410":
          description: "API deprecated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/410"
        
        "419":
          description: "Token expired"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/419"

        "500":
          description: "Server Error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
  
  /api/v1/user/checkpassword:
    post:
      tags:
        - /api/v1/user
      summary: Check user password match
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  example: password
                id:
                  type: string
                  example: "c075ac18-b583-4535-b3e4-cf1370d1143a"
      responses:
        "200":
          description: "Success to level down"
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/200-true"
                  - $ref: "#/components/schemas/200-false"

        "400":
          description: "Invalid fields"
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/400-user-not-exist"
        
        "403":
          description: "API Blocked"
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/403"
                  - $ref: "#/components/schemas/403-blocked"
                  - $ref: "#/components/schemas/403-token-invalid"
        
        "410":
          description: "API deprecated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/410"
        
        "419":
          description: "Token expired"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/419"

        "500":
          description: "Server Error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
  
  # Post API
  /api/v1/post/list:
    get:
      tags:
        - /api/v1/post
      summary: Get all of posts, order by created time, ASC
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of items to return
        - in: query
          name: offset
          schema:
            type: integer
            default: 0
          description: Number of item to skip before collecting result
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg: 
                    type: string
                    example: "OK"
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          example: "9304857a-0803-496a-b831-ca8509ee126b"
                        title:
                          type: string
                          example: "title"
                        content:
                          type: string
                          example: "content"
                        type:
                          type: string
                          enum:
                            - free
                            - notice
                            - admin
                        createdAt:
                          type: string
                          example: 2023-01-12T07:41:24.000Z
                        updatedAt:
                          type: string
                          example: 2023-01-12T07:41:24.000Z
                        authorId:
                          type: string
                          example: 77b29c78-82d9-4415-854c-3ca0cf3bbcff
                        Hashtags:
                          type: array
                          items:
                            type: object
                            properties:
                              id:
                                type: integer
                                example: 1
                              title:
                                type: string
                                example: hashtag-name
                              PostHashtag:
                                type: object
                                properties:
                                  id:
                                    type: integer
                                    example: 1
                                  PostId:
                                    type: string
                                    example: "9304857a-0803-496a-b831-ca8509ee126b"
                                  HashtagId:
                                    type: integer
                                    example: 1
                        Comments:
                          type: array
                          items:
                            type: object
                            properties:
                              id:
                                type: integer
                                example: 1
                              content:
                                type: string
                                example: content of comment
                              createdAt:
                                type: string
                                example: 2023-01-12T07:41:24.000Z
                              updatedAt:
                                type: string
                                example: 2023-01-12T07:41:24.000Z
                              authorId:
                                type: string
                                example: 77b29c78-82d9-4415-854c-3ca0cf3bbcff
                              postId:
                                type: string
                                example: "9304857a-0803-496a-b831-ca8509ee126b"
                          
                            
        "403":
          description: "API Blocked"
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/403"
                  - $ref: "#/components/schemas/403-blocked"
        "410":
          description: "API deprecated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/410"
        
        "500":
          description: "Server Error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'

  /api/v1/post/list/{id}:
    get:
      tags:
        - /api/v1/post
      summary: Get user's post list
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of items to return
        - in: query
          name: offset
          schema:
            type: integer
            default: 0
          description: Number of item to skip before collecting result
        - in: path
          name: id
          required: true
          schema:
            type: string
            example: c075ac18-b583-4535-b3e4-cf1370d1143a
          description: User id to search posts
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg: 
                    type: string
                    example: "OK"
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          example: "9304857a-0803-496a-b831-ca8509ee126b"
                        title:
                          type: string
                          example: "title"
                        content:
                          type: string
                          example: "content"
                        type:
                          type: string
                          enum:
                            - free
                            - notice
                            - admin
                        createdAt:
                          type: string
                          example: 2023-01-12T07:41:24.000Z
                        updatedAt:
                          type: string
                          example: 2023-01-12T07:41:24.000Z
                        authorId:
                          type: string
                          example: 77b29c78-82d9-4415-854c-3ca0cf3bbcff
                        Hashtags:
                          type: array
                          items:
                            type: object
                            properties:
                              id:
                                type: integer
                                example: 1
                              title:
                                type: string
                                example: hashtag-name
                              PostHashtag:
                                type: object
                                properties:
                                  id:
                                    type: integer
                                    example: 1
                                  PostId:
                                    type: string
                                    example: "9304857a-0803-496a-b831-ca8509ee126b"
                                  HashtagId:
                                    type: integer
                                    example: 1
        "403":
          description: "API Blocked"
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/403"
                  - $ref: "#/components/schemas/403-blocked"
        "410":
          description: "API deprecated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/410"
        
        "500":
          description: "Server Error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
    
  /api/v1/post/{id}:
    get:
      tags:
        - /api/v1/post
      summary: Get post's specific informations
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            example: "9304857a-0803-496a-b831-ca8509ee126b"
          description: Post ID
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg: 
                    type: string
                    example: "OK"
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        example: "9304857a-0803-496a-b831-ca8509ee126b"
                      title:
                        type: string
                        example: "title"
                      content:
                        type: string
                        example: "content"
                      type:
                        type: string
                        enum:
                          - free
                          - notice
                          - admin
                      createdAt:
                        type: string
                        example: 2023-01-12T07:41:24.000Z
                      updatedAt:
                        type: string
                        example: 2023-01-12T07:41:24.000Z
                      authorId:
                        type: string
                        example: 77b29c78-82d9-4415-854c-3ca0cf3bbcff
                      Hashtags:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 1
                            title:
                              type: string
                              example: hashtag-name
                            PostHashtag:
                              type: object
                              properties:
                                id:
                                  type: integer
                                  example: 1
                                PostId:
                                  type: string
                                  example: "9304857a-0803-496a-b831-ca8509ee126b"
                                HashtagId:
                                  type: integer
                                  example: 1
        "400":
          description: "Post not exist"
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/400-post-not-exist"

        "403":
          description: "API Blocked"
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/403"
                  - $ref: "#/components/schemas/403-blocked"
        "410":
          description: "API deprecated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/410"
        
        "500":
          description: "Server Error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'  

  /api/v1/post:
    post:
      tags:
        - /api/v1/post
      summary: Generate new post. Return generated post's ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: title
                content:
                  type: string
                  example: content
                type:
                  type: string
                  enum:
                    - free
                    - notice
                    - admin
                hashtags: 
                  type: array
                  items:
                    type: string
                    example: "hashtag name"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: "OK"
                  data:
                    type: string
                    example: "1573e434-1c0b-4ca6-bf77-413d688c5cea"
        "403":
          description: "API Blocked"
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/403"
                  - $ref: "#/components/schemas/403-blocked"
        "410":
          description: "API deprecated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/410"
        
        "500":
          description: "Server Error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
  
  /api/v1/post/edit:
    put:
      tags:
        - /api/v1/post
      summary: Edit post. Return true if success
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  example: "1573e434-1c0b-4ca6-bf77-413d688c5cea"
                  description: Post ID
                title:
                  type: string
                  example: "title"
                content:
                  type: string
                  example: "content"
                hashtags:
                  type: array
                  items:
                    type: string
                    example: "hashtag name"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/200-true"
                  - $ref: "#/components/schemas/200-false"
        
        "400":
          description: "Post not exist"
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/400-post-not-exist"

        "403":
          description: "API Blocked"
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/403"
                  - $ref: "#/components/schemas/403-blocked"
        "410":
          description: "API deprecated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/410"
        
        "500":
          description: "Server Error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
  
  /api/v1/post/delete:
    delete:
      tags:
          - /api/v1/post
      summary: Delete post. Using post Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  example: "36ed4c83-ab5b-4fbf-8481-3cdb0281e0a1"
                  description: "Post ID"
      responses:
        "200":
          description: "Success to login"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/200'
        "400":
          description: "Post not exist"
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/400-post-not-exist"

        "403":
          description: "API Blocked"
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/403"
                  - $ref: "#/components/schemas/403-blocked"
        "410":
          description: "API deprecated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/410"
        
        "500":
          description: "Server Error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
  
  /api/v1/post/{id}/comment/:
    get:
      tags:
        - /api/v1/post/comment
      summary: Get post's specific informations by createdAt, DESC
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            example: "9304857a-0803-496a-b831-ca8509ee126b"
          description: Post's ID
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg: 
                    type: string
                    example: "OK"
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        content:
                          type: string
                          example: content of comment
                        createdAt:
                          type: string
                          example: 2023-01-12T07:41:24.000Z
                        updatedAt:
                          type: string
                          example: 2023-01-12T07:41:24.000Z
                        authorId:
                          type: string
                          example: 77b29c78-82d9-4415-854c-3ca0cf3bbcff
                        postId:
                          type: string
                          example: "9304857a-0803-496a-b831-ca8509ee126b"
        
        "400":
          description: "Post not exist"
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/400-post-not-exist"

        "403":
          description: "API Blocked"
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/403"
                  - $ref: "#/components/schemas/403-blocked"
        "410":
          description: "API deprecated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/410"
        
        "500":
          description: "Server Error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
  
    post:
      tags:
        - /api/v1/post/comment
      summary: Create new comment about post
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            example: "9304857a-0803-496a-b831-ca8509ee126b"
          description: Post's ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  example: Comment content
      responses:
        "200":
          description: "Success to add comment"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/200'
        "400":
          description: "Post not exist"
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/400-post-not-exist"
                  - $ref: "#/components/schemas/400-comment-not-found"

        "403":
          description: "API Blocked"
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/403"
                  - $ref: "#/components/schemas/403-blocked"
        "410":
          description: "API deprecated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/410"
        
        "500":
          description: "Server Error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
  
    patch:
      tags:
          - /api/v1/post/comment
      summary: Update comment
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            example: "9304857a-0803-496a-b831-ca8509ee126b"
          description: Post's ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  example: Comment's ID
                  description: Comment's ID
                content:
                  type: string
                  example: content
                  description: Content to udpate
      responses:
        "200":
          description: "Success to update comment"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/200'
        "400":
          description: "Post not exist"
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/400-post-not-exist"
                  - $ref: "#/components/schemas/400-comment-not-found"

        "403":
          description: "API Blocked"
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/403"
                  - $ref: "#/components/schemas/403-blocked"
        "410":
          description: "API deprecated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/410"
        
        "500":
          description: "Server Error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'

    delete:
      tags:
          - /api/v1/post/comment
      summary: Delete comment
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            example: "9304857a-0803-496a-b831-ca8509ee126b"
          description: Post's ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  example: Comment's ID
                  description: Comment's ID
      responses:
        "200":
          description: "Success to update comment"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/200'
        "400":
          description: "Post not exist"
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/400-post-not-exist"
                  - $ref: "#/components/schemas/400-comment-not-found"

        "403":
          description: "API Blocked"
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/403"
                  - $ref: "#/components/schemas/403-blocked"
        "410":
          description: "API deprecated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/410"
        
        "500":
          description: "Server Error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'